To hash passwords and store them securely in a MySQL database using procedural oriented PHP, you can follow these steps:

1. When a user registers, use the `password_hash()` function to generate a secure hash of the user's password. For example:

```
$password = "password123";
$hashed_password = password_hash($password, PASSWORD_DEFAULT);
```

2. Store the hashed password in the MySQL database using an INSERT statement. For example:

```
$sql = "INSERT INTO users (username, password) VALUES ('$username', '$hashed_password')";
```

Note: It's important to use prepared statements to protect against SQL injection attacks, as mentioned in my previous answer.

3. When a user logs in, retrieve the hashed password from the database using a SELECT statement. For example:

```
$sql = "SELECT password FROM users WHERE username = '$username'";
$result = mysqli_query($connection, $sql);
$row = mysqli_fetch_assoc($result);
$hashed_password = $row['password'];
```

4. Use the `password_verify()` function to verify that the entered password matches the stored hashed password. For example:

```
if (password_verify($password, $hashed_password)) {
  // password is correct, log the user in
} else {
  // password is incorrect, show an error message
}
```

By using `password_hash()` and `password_verify()` functions, you can securely hash and verify passwords in your PHP application.